'use strict'

const { readdir, writeFile } = require('fs').promises
const { get } = require('https')

const { dependencies } = require('./package.json')

const pluginRegex = /@babel\/plugin-/
const presetRegex = /@babel\/preset-/
const pluginPresetRegex = /@babel\/(preset|plugin)-/

const getSyntaxPlugins = async () =>
  readdir('./node_modules/@babel')
    .then(items => items
      .filter(item => item.startsWith('plugin-syntax-'))
      .map(name => `@babel/${name}`)
    )

const fetch = async url => new Promise((resolve, reject) => {
  get(url, res => {
    const data = []

    res.on('data', chunk => data.push(chunk))
    res.on('end', () => {
      res.text = data.join('')
      resolve(res)
    })
  })
})

const toName = packageSpec =>
  packageSpec.replace(pluginPresetRegex, '')

const list = deps =>
  deps.map(v => `  '${toName(v)}': require('${v}')`)

const filterRegex = (obj, rgx) =>
  Object.keys(obj).filter(key => rgx.test(key))

const makeSource = (presets, plugins) => {
  const presetList = list(presets).join(',\n')
  const pluginList = list(plugins).join(',\n')

  const allTransforms = plugins
    .filter(plugin => (
      !plugin.startsWith('@babel/plugin-syntax-') &&
      !plugin.includes('transform-modules')
    ))
    .map(plugin => {
      const ref = `BabelStandalone.availablePlugins['${toName(plugin)}']`
      if (plugin.includes('pipeline-operator')) {
        return `[${ref}, { proposal: 'minimal' }]`
      } else if (plugin.includes('decorators')) {
        return `[${ref}, { decoratorsBeforeExport: false }]`
      }

      return ref
    })
    .join(',\n')

  return `
// this file is automatically generated
import * as BabelStandalone from './babel-standalone'
export * from './babel-standalone'

BabelStandalone.registerPresets({
${presetList},
  all: () => ({
    plugins: [
    ${allTransforms}
    ]
  })
})

BabelStandalone.registerPlugins({
${pluginList}
})
`
}

const unpkg = async packageSpec => {
  let res = await fetch(`https://unpkg.com/${packageSpec}/package.json`)

  if (res.headers.location) {
    res = await fetch(`https://unpkg.com${res.headers.location}`)
  }

  return JSON.parse(res.text)
}

const main = async () => {
  const env = await unpkg('@babel/preset-env')
  const presets = filterRegex(dependencies, presetRegex)
  const plugins = [
    ...await getSyntaxPlugins(),
    ...filterRegex(dependencies, pluginRegex),
    ...filterRegex(env.dependencies, pluginRegex)
  ]

  for (const [key, value] of Object.entries(dependencies)) {
    if (value === 0) dependencies[key] = env.version
  }

  plugins.sort()

  await writeFile('src/index.js', makeSource(presets, plugins).trim())
  return env.version
}

main()
  .then(version => console.log(`Updated to @babel/env v${version}`))
  .catch(e => console.error(e))
